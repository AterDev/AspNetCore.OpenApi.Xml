@if (Model == null)
{
    <p class="text-muted mb-0">@Localize("noResponse")</p>
}
else if (Model.Fields != null && Model.Fields.Count > 0)
{
    <PropertiesTable Fields="@Model.Fields" OnTypeClick="@OnShowTypeModal" CurrentLanguage="@CurrentLanguage" />
}
else if (Model.GenericArguments != null && Model.GenericArguments.Count > 0)
{
    var genericParams = string.Join(", ", Model.GenericArguments.Select(arg => arg.Name ?? arg.Id ?? "unknown"));
    <div class="p-3">
        <p class="mb-2"><strong>@Localize("type"): @(Model.Name ?? Model.Id) &lt; @genericParams &gt;</strong></p>
    </div>
    @foreach (var (arg, idx) in Model.GenericArguments.Select((a, i) => (a, i)))
    {
        @if (arg.Fields != null && arg.Fields.Count > 0)
        {
            <div class="p-3 pt-0">
                <p class="mb-2"><strong>Type Parameter @(idx + 1): @(arg.Name ?? arg.Id)</strong></p>
            </div>
            <PropertiesTable Fields="@arg.Fields" OnTypeClick="@OnShowTypeModal" CurrentLanguage="@CurrentLanguage" />
        }
    }
}
else if (Model.ElementType != null)
{
    @if (Model.ElementType.Fields != null && Model.ElementType.Fields.Count > 0)
    {
        <div class="p-3">
            <p class="mb-2"><strong>@Localize("arrayType"): @(Model.Name ?? Model.Id) &lt; @(Model.ElementType.Name ?? Model.ElementType.Id) &gt;</strong></p>
        </div>
        <PropertiesTable Fields="@Model.ElementType.Fields" OnTypeClick="@OnShowTypeModal" CurrentLanguage="@CurrentLanguage" />
    }
    else
    {
        <p class="p-3 mb-0">@Localize("arrayType")ï¼Œ@Localize("elementType"): @RenderModelTypeText(Model.ElementType)</p>
    }
}
else if (Model.KeyType != null && Model.ValueType != null)
{
    var keyTypeName = ModelDisplayHelper.GetTypeDisplayName(Model.KeyType);
    var valueTypeName = ModelDisplayHelper.GetTypeDisplayName(Model.ValueType);
    <div class="p-3">
        <p class="mb-2"><strong>@Localize("dictionaryType"): @(Model.Name ?? "Dictionary")&lt;@keyTypeName, @valueTypeName&gt;</strong></p>
        <p class="mb-1">@Localize("keyType"): @RenderModelTypeText(Model.KeyType)</p>
        <p class="mb-0">@Localize("valueType"): @RenderModelTypeText(Model.ValueType)</p>
    </div>
    @if (Model.ValueType.Fields != null && Model.ValueType.Fields.Count > 0)
    {
        <PropertiesTable Fields="@Model.ValueType.Fields" OnTypeClick="@OnShowTypeModal" CurrentLanguage="@CurrentLanguage" />
    }
}
else if (Model.TupleElements != null && Model.TupleElements.Count > 0)
{
    <div class="p-3">
        <p class="mb-2"><strong>@Localize("tupleType"): @(Model.Name ?? Model.Id)</strong></p>
    </div>
    var tupleFields = ModelDisplayHelper.ConvertTupleElementsToFields(Model.TupleElements);
    <PropertiesTable Fields="@tupleFields" OnTypeClick="@OnShowTypeModal" CurrentLanguage="@CurrentLanguage" />
}
else if (Model.ModelType == ModelType.Enum)
{
    <p class="p-3 mb-0">@Localize("type"): @(Model.Name ?? Model.Id)</p>
}
else
{
    <p class="p-3 mb-0">@Localize("type"): @(Model.Name ?? Model.Id ?? "unknown")</p>
}

@code {
    [Parameter]
    public ApiModel? Model { get; set; }

    [Parameter]
    public ApiDocument Document { get; set; } = null!;

    [Parameter]
    public EventCallback<string> OnShowTypeModal { get; set; }

    [Parameter]
    public string CurrentLanguage { get; set; } = "zh-CN";

    private string Localize(string key) => LocalizationService.Localize(key, CurrentLanguage);

    /// <summary>
    /// Renders a model type as plain text (no clickable link)
    /// </summary>
    private string RenderModelTypeText(ApiModel? model)
    {
        return ModelDisplayHelper.GetTypeDisplayNameHtml(model);
    }
}
